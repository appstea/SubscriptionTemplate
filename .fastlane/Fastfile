require 'babelish'
require 'json'
require 'date'

default_platform(:ios)

import_from_git(
  url: 'git@github.com:appstea/Fastlane_Actions.git', 
  path: 'Fastfile',
)

platform :ios do

  def profiles(profileType)
    return {
      "com.appstea.proto" => "match #{profileType} com.appstea.proto",
    }
  end

  before_all do 
    if is_ci 
      xcversion(version: "13.3.1")
    end
    $tg_bot_token = "1025580642:AAGW-ykbVYJDIrl1ktLaI9u6k3_pafOUNn8"
    $tg_chat_id = "-446147639"
    # https://console.firebase.google.com/u/0/project/subscription-template/appdistribution/app/ios:com.appstea.proto/releases
    $fir_distribuition_builds_url = "https://tinyurl.com/34fd67c9"
    $fir_app_id = "1:1039626167029:ios:e0f6a03c25da9b978b9bbc"
    $project_name = "SubsTemplate.xcodeproj"
    # $workspace_name = "SubsTemplate.xcworkspace"
    $scheme = "SubsTemplate"
    $release_notes = fetch_release_notes()
  end

  error do |lane, exception|
    e_name = exception.to_s
    if e_name == "Broken pipe @ io_writev - <STDOUT>"
        return
    end
  
    build = formatted_build_number($project_name, $scheme)
    log_url = "\n#{console_log_url()}"
    e_descr = "\n#{e_name}\nOutput: #{exception.error_info.to_s}"
  
    if lane.to_s == "adhoc"
      notify_tg("‚ùå AdHoc üè† build failed: #{build}#{log_url}#{e_descr}", $tg_chat_id, $tg_bot_token)        
    elsif lane.to_s == "store"
      notify_tg("‚ùå Store ‚úàÔ∏è build failed: #{build}#{log_url}#{e_descr}", $tg_chat_id, $tg_bot_token)    
    end
  end

  lane :adhoc do
    build("AdHoc", "ad-hoc", "AdHoc", false)

    firebase_app_distribution(
      app: $fir_app_id,
      ipa_path: $ipa_path,
      groups: "QA",
      release_notes: $release_notes,
    )

    build_number = formatted_build_number($project_name, $scheme)
    message = notification_build_message("AdHoc üè†", build_number, $release_notes, $fir_distribuition_builds_url)
    notify_tg(message, $tg_chat_id, $tg_bot_token)
  end

  lane :update_profiles do
    ENV["MATCH_PASSWORD"] = "qrj6cSef4t5i87rmUdWLcyTeslzpMl2"
    ids = [
      "com.appstea.proto",
    ]
  
    types = ["development", "adhoc", "appstore"]
    git = "git@github.com:appstea/iOS_Certificates.git"
    for type in types
      match(type: type, app_identifier: ids, readonly: true, git_url: git, clone_branch_directly: true, shallow_clone: true)
    end
  end

  def build(configuration, exportMethod, profileType, crashlytics)
    # cocoapods(repo_update: true)

    archives_folder = "./archives"
    output_name = "Apps&Subs.#{profileType}"
    build_number = build_number($project_name, $scheme)
  
    update_app_identifier(
      app_identifier: 'com.appstea.proto',
      plist_path: 'SubsTemplate/Resources/Info.plist'
    )
    
    gym(
      export_method: exportMethod,
      scheme: $scheme,
      configuration: configuration,
      # workspace: $workspace_name,
      output_name: output_name,
      output_directory: archives_folder,
      clean: true,
      include_bitcode: true,
      export_xcargs: "-allowProvisioningUpdates",
      export_options: {
          provisioningProfiles: profiles(profileType),
      },
      xcargs: "BUILD_NUMBER='#{build_number}'"
    )
      
    $ipa_path = "./archives/" + output_name + ".ipa"
    
    if crashlytics
      upload_symbols_to_crashlytics(
        dsym_path: "./archives/" + output_name + ".app.dSYM.zip"
      )
    end
  end

end

lane :update_l10n do
  system('babelish csv2strings')

  system('rm -rf ../SubsCraft/Sources/SubsCraftResources/Resources/Localizations')
  system('mkdir ../SubsCraft/Sources/SubsCraftResources/Resources/Localizations')
  system('rsync -av --exclude=\'InfoPlist.strings\' ../Localizations/ ../SubsCraft/Sources/SubsCraftResources/Resources/Localizations')

  codegen()
end

lane :codegen do
  swiftgen_l10n = 'swiftgen config run --config ../SwiftGen/.swiftgen.yml'
  system(swiftgen_l10n)
end